name: CI

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  engine-desktop:
    name: C++ Engine/Desktop
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build clang-tidy
      - name: Build engine
        run: |
          cmake -S engine -B engine/build -G Ninja -DVERITY_ENGINE_BUILD_TESTS=ON
          cmake --build engine/build --config Release
          ctest --test-dir engine/build --output-on-failure
      - name: Run clang-tidy (engine)
        run: |
          clang-tidy engine/src/engine.cpp -- -Iengine/include
      - name: Build desktop stub
        run: |
          cmake -S desktop -B desktop/build -G Ninja
          cmake --build desktop/build --config Release

  backend:
    name: Backend (Python)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          pip install -e .[dev]
      - name: Lint & Format check
        working-directory: backend
        run: |
          ruff check .
          black --check .
      - name: Tests
        working-directory: backend
        run: pytest -q
      - name: pip-audit
        working-directory: backend
        run: pip-audit

  web:
    name: Web (React/TS)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package.json
      - name: Install
        working-directory: web
        run: npm install --no-fund --no-audit
      - name: Lint
        working-directory: web
        run: npm run lint
      - name: Typecheck
        working-directory: web
        run: npm run typecheck
      - name: Tests
        working-directory: web
        run: npm test
      - name: Build
        working-directory: web
        run: npm run build

  desktop-schema-smoke:
    name: Desktop schema smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Create project and add data
        run: |
          python scripts/sceneproj.py --json create tmp.sceneproj --name "CI Smoke"
          # fixed UUIDs for deterministic CI
          SCENE_ID=11111111-1111-1111-1111-111111111111
          TRACK_ID=22222222-2222-2222-2222-222222222222
          python scripts/sceneproj.py --json add-scene tmp.sceneproj --name "Act 1" --id $SCENE_ID
          python scripts/sceneproj.py --json add-track tmp.sceneproj --scene-id $SCENE_ID --name PathA --kind curve --id $TRACK_ID
          python scripts/sceneproj.py --json add-key tmp.sceneproj --track-id $TRACK_ID --t 1000 --value '{"x":1}' --interp auto --id 33333333-3333-3333-3333-333333333333
          python scripts/sceneproj.py --json autosave tmp.sceneproj --slot 1
          python scripts/sceneproj.py --json restore tmp.sceneproj --slot 1
      - name: Upload .sceneproj artifact
        uses: actions/upload-artifact@v4
        with:
          name: schema-smoke-sceneproj
          path: tmp.sceneproj/**
      - name: Verify contents
        run: |
          python - << 'PY'
          import json, sqlite3
          import sys
          conn = sqlite3.connect('tmp.sceneproj/project.db')
          try:
              assert conn.execute('select count(*) from projects').fetchone()[0] == 1
              assert conn.execute('select count(*) from scenes').fetchone()[0] == 1
              assert conn.execute('select count(*) from tracks').fetchone()[0] == 1
              assert conn.execute('select count(*) from keyframes').fetchone()[0] == 1
          finally:
              conn.close()
          print('OK')
          PY

  desktop-sqlite-tests:
    name: Desktop (SQLite command tests)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libsqlite3-dev
      - name: Build with SQLite
        run: |
          cmake -S desktop -B desktop/build -G Ninja -DENABLE_SQLITE=ON
          cmake --build desktop/build --config Release
      - name: Run tests
        run: ctest --test-dir desktop/build --output-on-failure

  desktop-qt-shell:
    name: Desktop (Qt shell build)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build qt6-base-dev
      - name: Build Qt shell
        run: |
          cmake -S desktop -B desktop/build -G Ninja -DENABLE_QT_SHELL=ON
          cmake --build desktop/build --config Release
      - name: Verify Qt binary exists
        run: |
          test -f desktop/build/verity_qt_shell || (echo "Qt shell not built" && exit 1)
