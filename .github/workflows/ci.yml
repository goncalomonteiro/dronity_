name: CI

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  engine-desktop:
    name: C++ Engine/Desktop
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build clang-tidy
      - name: Build engine
        run: |
          cmake -S engine -B engine/build -G Ninja -DVERITY_ENGINE_BUILD_TESTS=ON
          cmake --build engine/build --config Release
          ctest --test-dir engine/build --output-on-failure
      - name: Run clang-tidy (engine)
        run: |
          clang-tidy engine/src/engine.cpp -- -Iengine/include
      - name: Build desktop stub
        run: |
          cmake -S desktop -B desktop/build -G Ninja
          cmake --build desktop/build --config Release
      - name: Run clang-tidy (desktop)
        run: |
          clang-tidy desktop/src/command.cpp -- -Idesktop/include -DVERITY_DESKTOP_SQLITE=0
          clang-tidy desktop/src/commands/add_keyframe.cpp -- -Idesktop/include -DVERITY_DESKTOP_SQLITE=0
          clang-tidy desktop/src/commands/move_selection.cpp -- -Idesktop/include -DVERITY_DESKTOP_SQLITE=0
          clang-tidy desktop/src/autosave.cpp -- -Idesktop/include -DVERITY_DESKTOP_SQLITE=0
          clang-tidy desktop/src/replay.cpp -- -Idesktop/include -DVERITY_DESKTOP_SQLITE=0

  backend:
    name: Backend (Python)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          pip install -e .[dev]
      - name: Lint & Format check
        working-directory: backend
        run: |
          ruff check .
          black --check .
      - name: Tests
        working-directory: backend
        run: pytest -q
      - name: pip-audit
        working-directory: backend
        run: pip-audit

  web:
    name: Web (React/TS)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package.json
      - name: Install
        working-directory: web
        run: npm install --no-fund --no-audit
      - name: Lint
        working-directory: web
        run: npm run lint
      - name: Typecheck
        working-directory: web
        run: npm run typecheck
      - name: Tests
        working-directory: web
        run: npm test
      - name: Build
        working-directory: web
        run: npm run build

  desktop-schema-smoke:
    name: Desktop schema smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Create project and add data
        run: |
          python scripts/sceneproj.py --json create tmp.sceneproj --name "CI Smoke"
          # fixed UUIDs for deterministic CI
          SCENE_ID=11111111-1111-1111-1111-111111111111
          TRACK_ID=22222222-2222-2222-2222-222222222222
          python scripts/sceneproj.py --json add-scene tmp.sceneproj --name "Act 1" --id $SCENE_ID
          python scripts/sceneproj.py --json add-track tmp.sceneproj --scene-id $SCENE_ID --name PathA --kind curve --id $TRACK_ID
          python scripts/sceneproj.py --json add-key tmp.sceneproj --track-id $TRACK_ID --t 1000 --value '{"x":1}' --interp auto --id 33333333-3333-3333-3333-333333333333
          python scripts/sceneproj.py --json autosave tmp.sceneproj --slot 1
          python scripts/sceneproj.py --json restore tmp.sceneproj --slot 1
      - name: Upload .sceneproj artifact
        uses: actions/upload-artifact@v4
        with:
          name: schema-smoke-sceneproj
          path: tmp.sceneproj/**
      - name: Verify contents
        run: |
          python - << 'PY'
          import json, sqlite3
          import sys
          conn = sqlite3.connect('tmp.sceneproj/project.db')
          try:
              assert conn.execute('select count(*) from projects').fetchone()[0] == 1
              assert conn.execute('select count(*) from scenes').fetchone()[0] == 1
              assert conn.execute('select count(*) from tracks').fetchone()[0] == 1
              assert conn.execute('select count(*) from keyframes').fetchone()[0] == 1
          finally:
              conn.close()
          print('OK')
          PY

  desktop-sqlite-tests:
    name: Desktop (SQLite command tests)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libsqlite3-dev
      - name: Build with SQLite
        run: |
          cmake -S desktop -B desktop/build -G Ninja -DENABLE_SQLITE=ON
          cmake --build desktop/build --config Release
      - name: Run tests
        run: ctest --test-dir desktop/build --output-on-failure

  desktop-qt-shell:
    name: Desktop (Qt shell build)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build qt6-base-dev
      - name: Build Qt shell
        run: |
          cmake -S desktop -B desktop/build -G Ninja -DENABLE_QT_SHELL=ON
          cmake --build desktop/build --config Release
      - name: Verify Qt binary exists
        run: |
          test -f desktop/build/verity_qt_shell || (echo "Qt shell not built" && exit 1)

  desktop-restore-smoke:
    name: Desktop restore smoke (--restore)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libsqlite3-dev sqlite3
      - name: Build desktop with SQLite
        run: |
          cmake -S desktop -B desktop/build -G Ninja -DENABLE_SQLITE=ON
          cmake --build desktop/build --config Release
      - name: Prepare project and generate revisions
        run: |
          python scripts/sceneproj.py --json create tmp.sceneproj --name "Restore Smoke"
          SCENE_ID=11111111-1111-1111-1111-111111111111
          TRACK_ID=track-demo
          python scripts/sceneproj.py --json add-scene tmp.sceneproj --name "Act 1" --id $SCENE_ID
          python scripts/sceneproj.py --json add-track tmp.sceneproj --scene-id $SCENE_ID --name PathA --kind curve --id $TRACK_ID
          # Run desktop runner to add a keyframe + move selection, which records revisions
          ./desktop/build/verity_desktop_runner --db tmp.sceneproj/project.db
          # Sanity check: revisions exist
          sqlite3 tmp.sceneproj/project.db "SELECT COUNT(*) FROM revisions;" | awk '{ if ($1 < 1) exit 1 }'
      - name: Create fresh DB and copy revisions
        run: |
          # Create fresh DB with minimal schema and identical project/track rows
          sqlite3 fresh.db <<'SQL'
          PRAGMA foreign_keys=ON;
          CREATE TABLE projects(id TEXT PRIMARY KEY, name TEXT, version INTEGER, created_at INTEGER, updated_at INTEGER);
          CREATE TABLE scenes(id TEXT PRIMARY KEY, project_id TEXT, name TEXT, created_at INTEGER, updated_at INTEGER);
          CREATE TABLE tracks(id TEXT PRIMARY KEY, scene_id TEXT, name TEXT, kind TEXT, created_at INTEGER, updated_at INTEGER);
          CREATE TABLE keyframes(id TEXT PRIMARY KEY, track_id TEXT NOT NULL, t_ms INTEGER NOT NULL, value_json TEXT NOT NULL, interp TEXT NOT NULL, created_at INTEGER, updated_at INTEGER);
          CREATE TABLE revisions(id INTEGER PRIMARY KEY AUTOINCREMENT, project_id TEXT, user TEXT, label TEXT, diff_json TEXT, created_at INTEGER);
          SQL
          # Copy project row and create same scene/track ids
          PROJ_ID=$(sqlite3 tmp.sceneproj/project.db "SELECT id FROM projects LIMIT 1;")
          sqlite3 fresh.db "INSERT INTO projects(id,name,version,created_at,updated_at) SELECT id,name,version,created_at,updated_at FROM tmp WHERE 1=0;" 2>/dev/null || true
          # Insert project using value from source
          sqlite3 fresh.db "INSERT INTO projects(id,name,version,created_at,updated_at) VALUES('$PROJ_ID','Restore Smoke',1,0,0);"
          sqlite3 fresh.db "INSERT INTO scenes(id,project_id,name,created_at,updated_at) VALUES('11111111-1111-1111-1111-111111111111','$PROJ_ID','Act 1',0,0);"
          sqlite3 fresh.db "INSERT INTO tracks(id,scene_id,name,kind,created_at,updated_at) VALUES('track-demo','11111111-1111-1111-1111-111111111111','PathA','curve',0,0);"
          # Copy revisions from original DB
          sqlite3 fresh.db "ATTACH 'tmp.sceneproj/project.db' AS src; INSERT INTO revisions(project_id,user,label,diff_json,created_at) SELECT project_id,user,label,diff_json,created_at FROM src.revisions; DETACH src;"
      - name: Restore into fresh DB and verify
        run: |
          ./desktop/build/verity_desktop_runner --db fresh.db --restore
          # Verify at least one keyframe was recreated
          sqlite3 fresh.db "SELECT COUNT(*) FROM keyframes;" | awk '{ if ($1 < 1) exit 1 }'

  scripts:
    name: Scripts (lint/format)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black
      - name: Lint & Format check
        run: |
          ruff check scripts
          black --check -l 100 scripts
